configfile: "config.yml"
import snkmk

REGIONS = snkmk.make_chroms(config["refs"])
shell.prefix = "set -xeuo pipefail; "

rule all:
    input:
        geno=expand("data/angsd/allsteps/ngm/grandis/jazmerged/split/{region}.geno.gz",
                     region=REGIONS["grandis"])
rule allsamp_stage1:
    input:
        expand("data/angsd/step1/ngm/grandis/jazmerged/split/{region}.{ext}",
                 region=REGIONS["grandis"], ext=["arg", "hwe.gz", "snpStat.gz"])

rule angsd_allsteps_split:
    input:
        bams=lambda wc: ["data/alignments/{aligner}/{ref}/{sample}.bam".format(
                             aligner=wc.aligner, ref=wc.ref, sample=s)
                         for s in sorted(config["sample_sets"][wc.set].keys())],
        ref=lambda wc: config['refs'][wc.ref],
    output:
        arg="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.arg",
        beagle="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.beagle.gz",
        geno="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.geno.gz",
        hwe="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.hwe.gz",
        ibs="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.ibs.gz",
        mafs="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.mafs.gz",
        safp="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.saf.pos.gz",
        safi="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.saf.idx",
        safz="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.saf.gz",
        stat="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
        tfam="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.tfam",
        tped="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.tped",
        vcf="data/angsd/allsteps/{aligner}/{ref}/{set}/split/{region}.vcf.gz",
    log:
        "data/log/angsd/allsteps/{aligner}/{ref}/{set}/{region}.log"
    params:
        regionarg=lambda wc: "" if wc.region == "genomewide" else "-rf $T/regions",
        regions=lambda wc: " ".join(REGIONS[wc.ref][wc.region])
    threads: 1
    shell:
        "T=$(mktemp -d); trap \"rm -rf $T\" EXIT ; "
        "echo {input.bams} | tr ' ' '\\n' > $T/bamfile ; "
        "echo {params.regions} | tr ' ' '\\n' > $T/regions ; "
        "( angsd"
        "   -bam $T/bamfile"
        "   {params.regionarg}"
        "   -P {threads}"
        "   -doCounts 1"
        "   -doGeno 4"
        "   -doMajorMinor 1"
        "   -doGlf 2"
        "   -doMaf 2"
        "   -doPost 1"
        "   -doIBS 1"
        "   -doPlink 2"
        "   -doSNPStat 1"
        "   -doSaf 1"
        "   -doVcf 1"
        "   -anc {input.ref}"
        "   -ref {input.ref}"
        "   -out data/angsd/{wildcards.aligner}/{wildcards.ref}/{wildcards.set}/split/{wildcards.region}"
        "   -GL 2" # GATK v1
        "   -SNP_pval 1e-3"
        "   -C 50"
        "   -baq 1"
        "   -minMapQ 30"
        "   -minQ 20"
        "   -skipTriallelic 1"
        " ) >{log} 2>&1"

rule plink_makebed_split:
    input:
        tfam="data/angsd/{step}/{aligner}/{ref}/{set}/split/{region}.tfam",
        tped="data/angsd/{step}/{aligner}/{ref}/{set}/split/{region}.tped",
    output:
        bed="data/angsd/{step}/{aligner}/{ref}/{set}/split/{region}.bed",
    log:
        "data/log/plink/makebed/{step}/{aligner}/{ref}/{set}/split/{region}.log"
    shell:
        "plink "
        "   --allow-extra-chr"
        "   --make-bed"
        "    --tfile $(dirname {input.tped})/$(basename {input.tped} .tped)"
        "    --out $(dirname {output.bed})/$(basename {output.bed} .bed)"
        " >{log} 2>&1"


rule angsd_step1_split:
    input:
        bams=lambda wc: ["data/alignments/{aligner}/{ref}/{sample}.bam".format(
                             aligner=wc.aligner, ref=wc.ref, sample=s)
                         for s in sorted(config["sample_sets"][wc.set].keys())],
        ref=lambda wc: config['refs'][wc.ref],
    output:
        arg="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.arg",
        hwe="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.hwe.gz",
        stat="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
    log:
        "data/log/angsd/step1/{aligner}/{ref}/{set}/{region}.log"
    params:
        regionarg=lambda wc: "" if wc.region == "genomewide" else "-rf $T/regions",
        regions=lambda wc: " ".join(REGIONS[wc.ref][wc.region]),
        gl=config["angsd"].get("glmethod", 2),
        minind=config["angsd"].get("minind", 1),
        mindp=config["angsd"].get("mindepth", 1),
        maxdp=config["angsd"].get("maxdepth", 1000),
        snppval=config["angsd"].get("snppval", 1/1000),
        minq=config["angsd"].get("minq", 1),
        minmapq=config["angsd"].get("minmapq", 1),
    threads: 1
    shell:
        "T=$(mktemp -d); trap \"rm -rf $T\" EXIT &&"
        "echo {input.bams} | tr ' ' '\\n' > $T/bamfile && "
        "echo {params.regions} | tr ' ' '\\n' > $T/regions && "
        "( angsd"
        "   -bam $T/bamfile"
        "   {params.regionarg}"
        "   -P {threads}"
        "   -doCounts 1"
        "   -doMajorMinor 1"
        "   -doSNPStat 1"
        "   -baq 1"
        "   -anc {input.ref}"
        "   -ref {input.ref}"
        "   -out $(dirname {output.arg})/$(basename {output.arg} .arg)"
        "   -GL {params.gl}"
        #"   -SNP_pval {params.snppval}"
        "   -minMapQ {params.minmapq}"
        "   -minQ  {params.minq}"
        "   -skipTriallelic 1"
        " ) >{log} 2>&1"
