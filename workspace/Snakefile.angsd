import snkmk
configfile: "config.yml"
rule angsd:
    input:
        step1=expand("data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
                    aligner=config["angsd"]["aligners"], ref=config["angsd"]["genome"],
                    set=SAMPLESETS, region=CHROMOSOMES[config["angsd"]["genome"]]),
        step2=expand("data/angsd/step2/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
                    aligner=config["angsd"]["aligners"], ref=config["angsd"]["genome"],
                    set=SAMPLESETS, region=CHROMOSOMES[config["angsd"]["genome"]]),


#--------------------------------------------------------------------------------
#-                                    ANGSD                                     -
#--------------------------------------------------------------------------------


rule angsd_bamfile:
    input:
        bams=lambda wc: ["data/alignments/{aligner}/{ref}/{sample}.bam".format(
                             aligner=wc.aligner, ref=wc.ref, sample=s)
                         for s in sorted(SAMPLESETS[wc.set])],
    output:
        bamfile="data/angsd/{aligner}/{ref}/{set}.bamfile",
    run:
        with open(output.bamfile, 'w') as fh:
            for bam in sorted(input.bams):
                print(bam, file=fh)

rule angsd_step1_split:
    input:
        bams=lambda wc: ["data/alignments/{aligner}/{ref}/{sample}.bam".format(
                             aligner=wc.aligner, ref=wc.ref, sample=s)
                         for s in sorted(SAMPLESETS[wc.set])],
        ref=lambda wc: config['refs'][wc.ref],
        bamfile="data/angsd/{aligner}/{ref}/{set}.bamfile",
    output:
        arg="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.arg",
        hwe="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.hwe.gz",
        stat="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
    log:
        "data/log/angsd/step1/{aligner}/{ref}/{set}/{region}.log"
    params:
        regionarg=lambda wc: "" if wc.region == "genomewide" else "-rf $T/regions",
        regions=lambda wc: " ".join(CHROMOSOMES[wc.ref][wc.region]),
        gl=config["angsd"].get("glmethod", 2),
        minind=config["angsd"].get("minind", 1),
        mindp=config["angsd"].get("mindepth", 1),
        maxdp=config["angsd"].get("maxdepth", 1000),
        snppval=config["angsd"].get("snppval", 1/1000),
        minq=config["angsd"].get("minq", 1),
        minmapq=config["angsd"].get("minmapq", 1),
        minmaf=config["angsd"].get("minmaf", 0.0),
    threads: 2
    shell:
        "T=$(mktemp -d); trap \"rm -rf $T\" EXIT &&"
        "echo {params.regions} | tr ' ' '\\n' > $T/regions && "
        "( angsd"
        "   -bam {input.bamfile}"
        "   {params.regionarg}"
        "   -P {threads}"
        "   -doCounts 1"
        "   -doMaf 1"
        "   -doMajorMinor 1"
        "   -doSNPStat 1"
        "   -baq 1"
        "   -anc {input.ref}"
        "   -ref {input.ref}"
        "   -out $(dirname {output.arg})/$(basename {output.arg} .arg)"
        "   -GL {params.gl}"
        "   -snp_pval {params.snppval}"
        "   -minMapQ {params.minmapq}"
        "   -minQ  {params.minq}"
        "   -minMaf  {params.minmaf}"
        "   -skipTriallelic 1"
        " ) >{log} 2>&1"

localrules: angsd_step1_filter
rule angsd_step1_filter:
    input:
        hwe="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.hwe.gz",
        stat="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
    output:
        sites="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.sites",
        stats="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.sitestats.tsv",
        binsites="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.sites.bin",
        binsitesidx="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.sites.idx",
    log:
        "data/log/angsd/step1_filter/{aligner}/{ref}/{set}/{region}.log"
    params:
        minMAD=config["angsd"].get("minMAD", 1),
    threads: 1
    shell:
        "( ./scripts/snpStat2sites.R"
        "   $(dirname {input.hwe})/$(basename {input.hwe} .hwe.gz)"
        "   $(dirname {output.sites})/$(basename {output.sites} .sites)"
        " && angsd sites index {output.sites}"
        " ) >{log} 2>&1"


rule angsd_step2_split:
    input:
        bams=lambda wc: ["data/alignments/{aligner}/{ref}/{sample}.bam".format(
                             aligner=wc.aligner, ref=wc.ref, sample=s)
                         for s in sorted(SAMPLESETS[wc.set])],
        ref=lambda wc: config['refs'][wc.ref],
        sites="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.sites",
        binsites="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.sites.bin",
        bamfile="data/angsd/{aligner}/{ref}/{set}.bamfile",
    output:
        arg="data/angsd/step2/{aligner}/{ref}/{set}/split/{region}.arg",
        hwe="data/angsd/step2/{aligner}/{ref}/{set}/split/{region}.hwe.gz",
        stat="data/angsd/step2/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
    log:
        "data/log/angsd/step2/{aligner}/{ref}/{set}/{region}.log"
    params:
        regionarg=lambda wc: "" if wc.region == "genomewide" else "-rf $T/regions",
        regions=lambda wc: " ".join(CHROMOSOMES[wc.ref][wc.region]),
        gl=config["angsd"].get("glmethod", 2),
        minind=config["angsd"].get("minind", 1),
        mindp=config["angsd"].get("mindepth", 1),
        maxdp=config["angsd"].get("maxdepth", 1000),
        snppval=config["angsd"].get("snppval", 1/1000),
        minq=config["angsd"].get("minq", 1),
        minmapq=config["angsd"].get("minmapq", 1),
        minmaf=config["angsd"].get("minmaf", 0.0),
    threads: 1
    shell:
        "T=$(mktemp -d); trap \"rm -rf $T\" EXIT &&"
        "echo {params.regions} | tr ' ' '\\n' > $T/regions && "
        "( angsd"
        "   -bam {input.bamfile}"
        "   {params.regionarg}"
        "   -sites {input.sites}"
        "   -P {threads}"
        "   -doCounts 1"
        "   -doGeno 4"
        "   -doMajorMinor 1"
        "   -doGlf 2"
        "   -doMaf 2"
        "   -doPost 1"
        "   -doIBS 1"
        "   -doPlink 2"
        "   -doSNPStat 1"
        "   -doSaf 1"
        "   -baq 1"
        "   -anc {input.ref}"
        "   -ref {input.ref}"
        "   -out $(dirname {output.arg})/$(basename {output.arg} .arg)"
        "   -GL {params.gl}"
        "   -snp_pval {params.snppval}"
        "   -minMapQ {params.minmapq}"
        "   -minQ  {params.minq}"
        "   -minMaf  {params.minmaf}"
        "   -skipTriallelic 1"
        " ) >{log} 2>&1"

