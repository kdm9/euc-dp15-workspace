configfile: "config.yml"
import snkmk
RUNLIB2SAMP, SAMP2RUNLIB = snkmk.make_runlib2samp()
SAMPLESETS = snkmk.make_samplesets(config['sample_sets'])
shell.prefix = "set -euo pipefail; "
VARCALL_REGIONS = snkmk.make_regions(config["refs"], window=config["varcall"]["chunksize"])

try:
    assert(callable(pipe))
    pipeortemp = pipe
    pipeortemp = lambda x: x
except (AssertionError, NameError) as e:
    pipeortemp = temp

wildcard_constraints:
    run="[^/]+",
    lib="[^/]+",
    aligner="[^/]+",
    sample="[^/]+",
    ref="[^/]+",
    type="[^/]+",

subworkflow align:
    workdir: ".."
    snakefile: "align.rules"


rule freebayes:
    input:
        bam=align("data/alignments/{aligner}/{ref}/sets/{sampleset}.bam"),
        ref=lambda wc: config['refs'][wc.ref],
    output:
        bcf=pipeortemp("data/variants/raw_split/freebayes/{aligner}/{ref}/{sampleset}/{region}.bcf"),
    log:
        "data/log/freebayes/{aligner}/{ref}/{sampleset}/{region}.log"
    threads: 1
    params:
        theta=config["varcall"].get("theta_prior", 0.01),
    shell:
        "( freebayes"
        "   --theta {params.theta}"
        "   --use-reference-allele"
        "   --min-mapping-quality 10"
        "   --min-base-quality 10"
        "   --use-mapping-quality"
        "   --region '{wildcards.region}'"
        "   --fasta-reference {input.ref}"
        "   {input.bam}"
        " | bcftools view"
        "   -O u  -o {output.bcf}"
        " ) >{log} 2>&1"

rule mpileup:
    input:
        bam=align("data/alignments/{aligner}/{ref}/sets/{sampleset}.bam"),
        ref=lambda wc: config['refs'][wc.ref],
    output:
        bcf=pipeortemp("data/variants/raw_split/mpileup/{aligner}/{ref}/{sampleset}/{region}.bcf"),
    log:
        "data/log/mpileup/{aligner}/{ref}/{sampleset}/{region}.log"
    threads: 1
    params:
        theta=config["varcall"].get("theta_prior", 0.01),
    shell:
        "( samtools mpileup"
        "   --output-tags DP,AD,SP,INFO/AD" #output everything
        "   --region '{wildcards.region}'"
        "   --fasta-ref {input.ref}"
        "   --redo-BAQ"
        "   --BCF --uncompressed"
        "   {input.bam}"
        " | bcftools call"
        "   --targets '{wildcards.region}'" # might not be needed
        "   --multiallelic-caller"
        "   --prior {params.theta}"
        "   -O u"
        "   -o {output.bcf}"
        " ) >{log} 2>&1"


rule bcfnorm:
    input:
        bcf="data/variants/raw_split/{caller}/{aligner}/{ref}/{sampleset}/{region}.bcf",
        ref=lambda wc: config['refs'][wc.ref],
    output:
        # Not a pipe! can't run multiple filters if a pipe
        bcf=temp("data/variants/norm_split/{caller}/{aligner}/{ref}/{sampleset}/{region}.bcf"),
    log:
        "data/log/bcfnormalise/{caller}/{aligner}/{ref}/{sampleset}/{region}.log"
    shell:
        "( bcftools norm"
        "   --rm-dup any"
        "   --fasta-ref {input.ref}"
        "   -O u"
        "   {input.bcf}"
        " | vt decompose_blocksub + -o -" # decompose MNP to multipe SNPs
        " | bcftools norm" # second norm is to ensure that the decompose didn't lead to un-normed variants
        "   --rm-dup any"
        "   --fasta-ref {input.ref}"
        "   --multiallelics +any" # Merge overlapping bi-allelics to one multi-allelic
        "   -O u  -o {output.bcf}"
        " ) >{log} 2>&1"

rule bcffilter:
    input:
        bcf="data/variants/norm_split/{caller}/{aligner}/{ref}/{sampleset}/{region}.bcf",
    output:
        # Not a pipe! can't run all regions separately if this is a pipe into merge
        bcf=temp("data/variants/filter_split/{caller}~{aligner}~{ref}~{sampleset}_filtered~{filter}/{region}.bcf"),
    log:
        "data/log/bcffilter/{caller}/{aligner}/{ref}/{sampleset}/{filter}/{region}.log"
    params:
        filtarg=lambda wc: config["varcall"]["filters"][wc.filter].replace('\n', ' ')
    shell:
        "( bcftools view"
        "   {params.filtarg}"
        "   -O u  -o {output.bcf}"
        "   {input.bcf}"
        " ) >{log} 2>&1"

rule bcfmerge:
    input:
        bcf=lambda wc: expand("data/variants/filter_split/{caller}~{aligner}~{ref}~{sampleset}_filtered~{filter}/{region}.bcf",
                              caller=wc.caller, aligner=wc.aligner, ref=wc.ref, sampleset=wc.sampleset, filter=wc.filter,
                              region=sorted(VARCALL_REGIONS[wc.ref])),
    output:
        bcf="data/variants/merged_filtered/{caller}~{aligner}~{ref}~{sampleset}~filtered-{filter}.bcf",
    log:
        "data/log/mergebcf/{caller}~{aligner}~{ref}~{sampleset}_filtered~{filter}.log"
    threads: 28
    shell:
        "( bcftools concat"
        "   --threads {threads}"
        "   -O b"
        "   -o {output.bcf}"
        "   {input.bcf}"
        " ) >{log} 2>&1"


rule bcf2vcf:
    input:
        bcf="{path}.bcf",
        idx="{path}.bcf.csi",
    output:
        vcf="{path}.vcf.gz",
        idx="{path}.vcf.gz.csi",
    log:
        "data/log/bcf2vcf/{path}.log"
    threads: 28
    shell:
        "( bcftools view"
        "   {input.bcf}"
        "   -O z"
        "   --threads {threads}"
        "   -o {output.vcf}"
        " && bcftools index -f {output.vcf}"
        " ) >{log} 2>&1"

rule bcfidx:
    input:
        "{path}.bcf"
    output:
        "{path}.bcf.csi"
    shell:
        "bcftools index -f {input}"
