configfile: "config.yml"
import snkmk
RUNLIB2SAMP, SAMP2RUNLIB = snkmk.make_runlib2samp()
SAMPLESETS = snkmk.make_samplesets(config['sample_sets'])
shell.prefix = "set -euo pipefail; "
ANGSD_REGIONS = snkmk.make_regions(config["refs"], window=100000)


wildcard_constraints:
    run="[^/]+",
    lib="[^/]+",
    aligner="[^/]+",
    sample="[^/]+",
    sampleset="[^/]+",
    region="[^/]+",
    ref="[^/]+",
    type="[^/]+",

rule all:
    input:
        expand("data/angsd/beaglegl_subsets/bwa~grandisv2chl~Project2~5000000snps~seed{seed}.beagle.gz",
               seed=["{:03d}".format(i) for i in range(20)]),


subworkflow align:
    workdir: ".."
    snakefile: "align.rules"


rule angsd_beaglegl_region:
    input:
        bamlist=align("data/bamlists/{aligner}/{ref}/{sampleset}.bamlist"),
        ref=lambda wc: config['refs'][wc.ref],
    output:
        temp("data/angsd/beaglegl/{aligner}~{ref}~{sampleset}/{region}.beagle.gz"),
    log:
        "data/log/angsd_beaglegl/{aligner}~{ref}~{sampleset}/{region}.log"
    params:
        prefix=lambda wildcards, output: output[0][:-len(".beagle.gz")],
    shell:
        "(angsd "
        "   -out {params.prefix}"
        "   -bam {input.bamlist}"
        "   -ref {input.ref}"
        "   -anc {input.ref}"
        "   -r {wildcards.region}"
        "   -nThreads {threads}"
        "   -GL 2 -doGlf 2 -doGeno -doMajorMinor 1 -SNP_pval 1e-4 -doMaf 2 -doPost 1  -minMaf 0.05 -minInd 50"
        ") >{log} 2>&1"

rule angsd_beaglegl_merge:
    input:
        lambda wc: expand("data/angsd/beaglegl/{aligner}~{ref}~{sampleset}/{region}.beagle.gz",
                          aligner=wc.aligner, ref=wc.ref, sampleset=wc.sampleset, region=ANGSD_REGIONS[wc.ref])
    output:
        beagle="data/angsd/beaglegl/{aligner}~{ref}~{sampleset}.beagle.gz",
        nsites="data/angsd/beaglegl/{aligner}~{ref}~{sampleset}.nsites",
    threads: 8
    script: "scripts/merge_beaglegl.py"

rule angsd_beaglegl_subset:
    input:
        beagle="data/angsd/beaglegl/{aligner}~{ref}~{sampleset}.beagle.gz",
        nsites="data/angsd/beaglegl/{aligner}~{ref}~{sampleset}.nsites",
    output:
        beagle="data/angsd/beaglegl_subsets/{aligner}~{ref}~{sampleset}~{nsnps}snps~seed{seed}.beagle.gz",
    threads: 1
    shell:
        "zcat {input.beagle} | "
        " randomlines"
        "   -H 1 -S $(cat {input.nsites})"
        "   -n {wildcards.nsnps} -e {wildcards.seed} /dev/fd/0 |"
        "  gzip > {output.beagle}"

rule pcangsd:
    input:
        beagle="data/angsd/beaglegl_subsets/{aligner}~{ref}~{sampleset}~{nsnps}snps~seed{seed}.beagle.gz",
    output:
        "data/angsd/pcangsd/{aligner}~{ref}~{sampleset}~{nsnps}snps~seed{seed}.cov",
        "data/angsd/pcangsd/{aligner}~{ref}~{sampleset}~{nsnps}snps~seed{seed}.expg.npy",
        "data/angsd/pcangsd/{aligner}~{ref}~{sampleset}~{nsnps}snps~seed{seed}.indf.npy",
        "data/angsd/pcangsd/{aligner}~{ref}~{sampleset}~{nsnps}snps~seed{seed}.selection.gz",
    threads: 8
    params:
        prefix=lambda wildcards, output: output[0][:-len(".beagle.gz")],
    shell:
        "(pcangsd"
        "   -threads {threads}"
        "   -o {params.prefix}"
        "   -beagle {input.beagle}"
        "   -indf_save"
        "   -sites_save"
        "   -expg_save"
        "   -admix"
        "   -admix_save"
        "   -selection 2"
        "   -inbreed 2"
        ")>{log} 2>&1"



