import yaml
configfile: "config.yml"

SAMPLES = yaml.load(open("rawdata/samples.yml"))

rule all:
    input:
        expand("data/alignments/ngm/{ref}/{sample}.bam", ref=config["mapping"]["ref"],
               sample=SAMPLES),
        expand("data/alignments/ngm/{ref}_merged.bam", ref=config["mapping"]["ref"]),


rule ngmap:
    input:
        reads="data/reads/{sample}.fastq.gz",
        ref=lambda wc: config['refs'][wc.ref]
    output:
        bam="data/alignments/ngm/{ref}/{sample}.bam",
        bai="data/alignments/ngm/{ref}/{sample}.bam.bai",
    log:
        "data/log/ngm/{ref}_{sample}.log"
    threads:
        16
    shell:
        "( ngm"
        "   -q {input.reads}"
        "   -p" # paired input
        "   -r {input.ref}"
        "   -t {threads}"
        "   --rg-id {wildcards.sample}"
        "   --rg-sm {wildcards.sample}"
        "   --very-sensitive"
        " | samtools view -Suh -"
        " | samtools sort"
        "   -T ${{TMPDIR:-/tmp}}/{wildcards.sample}"
        "   -@ {threads}"
        "   -m 1G"
        "   -o {output.bam}"
        "   -" # stdin
        " && samtools index {output.bam}"
        " ) >{log} 2>&1"

rule mergebam:
    input:
        expand("data/alignments/{{aligner}}/{{ref}}/{sample}.bam", sample=SAMPLES),
    output:
        bam="data/alignments/{aligner}/{ref}_merged.bam",
        bai="data/alignments/{aligner}/{ref}_merged.bam.bai",
    log:
        "data/log/mergebam/{ref}.log"
    threads: 16
    shell:
        "( samtools merge"
        "   -@ {threads}"
        "   {output.bam}"
        "   {input}"
        " && samtools index {output.bam}"
        " ) >{log} 2>&1"
