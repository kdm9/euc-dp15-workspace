configfile: "config.yml"
import snkmk
RUNLIB2SAMP, SAMP2RUNLIB = snkmk.make_runlib2samp()
SAMPLESETS = snkmk.make_samplesets(config['sample_sets'])
shell.prefix = "set -euo pipefail; "

#######################################################################
#                            Read-level QC                            #
#######################################################################


subworkflow reads:
    workdir: "."
    snakefile: "snakemake/reads.rules"

rule qc_runlib:
    input:
        [reads("data/reads/runs/{run}/{lib}.fastq.gz".format(run=run, lib=lib))
		for run, lib in RUNLIB2SAMP],

rule read_stats:
    input:
        reads("data/stats/reads/readnum_librun.tsv"),
        reads("data/stats/reads/readnum_samples.tsv"),

rule qc_samples:
    input:
        reads(expand("data/reads/samples/{sample}.fastq.gz", sample=SAMP2RUNLIB))


rule reads:
    input:
        rules.qc_runlib.input,
        rules.read_stats.input,
        rules.qc_samples.input,


#######################################################################
#                      De-novo Distance analysis                      #
#######################################################################

subworkflow denovo:
    workdir: "."
    snakefile: "snakemake/denovo.rules"

rule kwip:
    input:
        denovo(expand("data/kwip/k{ksize}-s{sketchsize}/{set}.dist",
                ksize=config["denovodist"]["ksize"],
                sketchsize=config["denovodist"]["kwip_sketchsize"],
                set=config["denovodist"]["kwip_sets"])),
rule sourmash:
    input:
        denovo(expand("data/sourmash/k{ksize}-s{sketchsize}/{set}.dist",
                ksize=config["denovodist"]["ksize"],
                sketchsize=config["denovodist"]["sourmash_sketchsize"],
                set=config["denovodist"]["sourmash_sets"])),

rule mash:
    input:
        denovo(expand("data/mash/k{ksize}-s{sketchsize}/{set}.dist",
                ksize=config["denovodist"]["ksize"],
                sketchsize=config["denovodist"]["mash_sketchsize"],
                set=config["denovodist"]["mash_sets"])),

rule denovo:
    input:
        rules.kwip.input,
        rules.mash.input,
        rules.sourmash.input,

#######################################################################
#                       Alignment to Reference                        #
#######################################################################

subworkflow align:
    workdir: "."
    snakefile: "snakemake/align.rules"

rule align_librun:
    input:
        lambda wc: [align("data/alignments/{aln}/{ref}/byrun/{run}/{lib}.bam".
                        format(run=r, lib=l, aln=a, ref=ref))
                        for r, l in RUNLIB2SAMP
                        for a in config["mapping"]["aligners"]
                        for ref in config["mapping"]["refs"]],

rule align_samp:
    input:
        align(expand("data/alignments/{aligner}/{ref}/samples/{sample}.bam",
               ref=config["mapping"]["refs"],
               aligner=config["mapping"]["aligners"],
               sample=SAMP2RUNLIB)),

rule align_sampset:
    input:
        rules.align_samp.input,
        align(expand("data/alignments/{aligner}/{ref}/sets/{sampleset}.bam",
               ref=config["mapping"]["refs"],
               aligner=config["mapping"]["aligners"],
               sampleset=SAMPLESETS)),
        align(expand("data/bamlists/{aligner}/{ref}/{sampleset}.bamlist",
               ref=config["mapping"]["refs"],
               aligner=config["mapping"]["aligners"],
               sampleset=SAMPLESETS)),

rule bamstats:
    input:
        align(expand("data/stats/{type}-{aligner}~{ref}.tsv",
               aligner=config["mapping"]["aligners"],
               ref=config["mapping"]["refs"],
               type=["insertsize", "qualstat"])),

rule align:
   input:
        rules.align_sampset.input,
        rules.bamstats.input,

#######################################################################
#                           Variant Calling                           #
#######################################################################

subworkflow varcall:
    workdir: "."
    snakefile: "snakemake/varcall.rules"


rule filtered_variants:
    input:
        varcall(expand("data/variants/final/{caller}~{aligner}~{ref}~{sampleset}~filtered-{filter}.{ext}",
                       ext=["bcf", "bcf.csi", "vcf.gz", "vcf.gz.csi"],
                       caller=config["varcall"]["callers"],
                       aligner=config["varcall"]["aligners"],
                       ref=config["varcall"]["refs"],
                       sampleset=config["varcall"]["samplesets"],
                       filter=config["varcall"]["filters"])),
rule dbgvc:
    input:
        varcall(expand("data/variants/filter_split/{caller}~{aligner}~{ref}~{sampleset}_filtered~{filter}/{region}.{ext}",
                       region="Chr02:1000000-1010000",
                       ext=["bcf"],
                       caller=config["varcall"]["callers"],
                       aligner=config["varcall"]["aligners"],
                       ref=config["varcall"]["refs"],
                       sampleset="Project1PlusOxley",
                       filter=config["varcall"]["filters"])),

rule varcall:
    input:
        rules.filtered_variants.input,

#######################################################################
#                              All rule                               #
#######################################################################


rule all:
    input:
        rules.denovo.input,
        rules.reads.input,
        rules.align.input,
        rules.varcall.input,

