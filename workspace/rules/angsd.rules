configfile: "config.yml"
import snkmk
runlib2samp, samp2runlib = snkmk.make_runlib2samp()
samplesets = snkmk.make_samplesets(config['sample_sets'])
shell.prefix = "set -euo pipefail; "
angsd_regions = snkmk.make_regions(config["refs"], window=config["angsd"]["chunksize"])


wildcard_constraints:
    run="[^/]+",
    lib="[^/]+",
    aligner="[^/]+",
    sample="[^/]+",
    sampleset="[^/]+",
    region="[^/]+",
    angsdfilter="[^/]+",
    ref="[^/]+",
    type="[^/]+",

rule all:
    input:
        expand("data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}.{filetype}",
               aligner=config["angsd"]["aligners"],
               ref=config["angsd"]["refs"],
               sampleset=config["angsd"]["samplesets"],
               angsdfilter=config["angsd"]["filters"],
               filetype=["beagle.gz", "nsnps", "saf.gz", "saf.idx", "saf.pos.gz"])


subworkflow align:
    workdir: ".."
    snakefile: "align.rules"


rule angsd_mafsaf_region:
    input:
        bamlist=align("data/bamlists/{aligner}/{ref}/{sampleset}.bamlist"),
        ref=lambda wc: config['refs'][wc.ref],
    output:
        beagle=temp("data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}/{region}.beagle.gz"),
        maf=temp("data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}/{region}.mafs.gz"),
        saf=temp("data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}/{region}.saf.gz"),
    log:
        "data/log/angsd_mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}/{region}.log"
    params:
        prefix=lambda wildcards, output: output.beagle[:-len(".beagle.gz")],
        angsd_filters=lambda wc: config["angsd"]["filters"].get(wc.angsdfilter, ""),
    threads: 1
    shell:
        "(angsd "
        "   -out {params.prefix}"
        "   -bam {input.bamlist}"
        "   -ref {input.ref}"
        "   -anc {input.ref}"
        "   -r {wildcards.region}"
        "   -nthreads {threads}"
        "   -gl 2 -doglf 2 -doCounts 1 -dosnpstat 1 -domajorminor 1 -domaf 3 -dopost 1 -dosaf 1 -underFlowProtect 1"
        "   {params.angsd_filters}"
        ") >{log} 2>&1"

rule angsd_beaglegl_merge:
    input:
        lambda wc: expand("data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}/{region}.beagle.gz",
                          aligner=wc.aligner, ref=wc.ref, sampleset=wc.sampleset,
                          angsdfilter=wc.angsdfilter, region=angsd_regions[wc.ref])
    output:
        beagle="data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}.beagle.gz",
        nsnps="data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}.nsnps",
    threads: 4
    script: "../scripts/merge_beaglegl.py"

rule angsd_saf_merge:
    input:
        lambda wc: expand("data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}/{region}.saf.gz",
                          aligner=wc.aligner, ref=wc.ref, sampleset=wc.sampleset,
                          angsdfilter=wc.angsdfilter, region=angsd_regions[wc.ref])
    output:
        saf="data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}.saf.gz",
        pos="data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}.saf.pos.gz",
        idx="data/angsd/mafsaf/{aligner}~{ref}~{sampleset}~{angsdfilter}.saf.idx",
    params:
        prefix=lambda wildcards, output: output.saf[:-len(".saf.gz")],
    log: "data/log/angsd_mafsaf/mergesaf/{aligner}~{ref}~{sampleset}~{angsdfilter}.log"
    threads: 1
    priority: 2
    shell:
        "realSFS cat -outnames {params.prefix} {input} >{log} 2>&1"
